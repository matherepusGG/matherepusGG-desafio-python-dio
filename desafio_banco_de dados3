from abc import ABC, abstractclassmethod, abstractproperty
from datatime import datatime

class cliente:
    def __init__(self, endereço):
        self. endereço = endereço
        self.contas = []

    def realizar_transação(self, conta, transação):
        transação.criar(conta)

    def adicionar_conta(self, conta):
        self.contas,append(conta)

class pessoafisica(cliente):
    def __init__ (self, nome data_nascimento, cpf, endereço):
        super().__init__(endereço)
        self.nome = nome
        self.data_nascimento - data_nascimento
        self.cpf = cpf 

class conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "ab557"
        self._hitorico = historico()

    @classmethod
    def nova_conta(cls, cliente,numero):
        return cls(numero, cliente)
    
    @property
    def saldo(self):
        return self._saldo
    
    @property
    def numero(self):
        return self._numero
    
    @property
    def agencia (self):
        return self._agencia
    
    @property
    def cliente (self):
        return self._cliente
    
    @property
    def historico(self):
        return self._historico
    
    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            self._saldo -= valor
            print("você não tem saldo suficiente!")

        elif valor > 0:
            self._saldo -= valor
            print("saque feito com sucesso!")
            return True
        
        else:
            print("o valor que você informou é invalido.")

        return False
    
    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print("deposito feito com sucesso!")

        else:
            print("valor invalido, informe um valor valido!")
            return False
        
        return True
    
    def contacorrente(conta):
        def __init__(self, numero, cliente,limite=500, limite_saques=3):
            super().__init__(numero, cliente)
            self.limite = limite
            self.limite_saque = limite_saques

        def sacar(self, valor):
            numero_saques = len(
                [transação for transação in self.historico.transacoes
                if transação["tipo"] == saque.__name__])
            
            excedeu_limite = valor > self.limite
            excedeu_limite = numero_saques >= self.limite_saques

            if excedeu_limite:
                print("operação falhou! limite atingido")

            elif excedeu_saque:
                print("numero maximo de saques ultrapassado")

            else:
                return super().sacar(valor)
            
            return False
        
        def __str__(self):
            return f"""\ agencia:\t{self.agencia}
            c\c\t\t{self.numero}
            titular:\t{self.cliente.nome}"""
        
class historico:
    def __init__(self):
        self._transação.append(
            {
                "tipo": transação.__class__.__name__,
                "valor": transação.valor,
                "data": datetime.now(). strftime
                ("%d-%m-%y %h:%m:%s"),
            }
        )

class transação(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass

    @abstractclassmethod
    def registrar(self, conta):
        pass

class saque(transação):
    def __init__(self, valor):
        self._valor = valor

        @property
        def valor(self):
            return self._valor
        
        def registrar(self, conta):
            secesso_transção = conta.sacar(self.valor)

            if sucesso_transação:
                conta_historico.adicinar_transação(self)

class depositar(transação):
    def __init__ (self, valor):
        self._valor = valor
    
    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transação = conta.depositar(self.valor)

        if sucesso_transação:
            conta.historico.adicionar_transação(self)
