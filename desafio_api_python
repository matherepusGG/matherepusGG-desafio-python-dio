echo -e '\nexport PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
source ~/.bashrc

mkdir workout_api
cd workout_api
mkdir app
touch app/main.py app/models.py app/schemas.py app/database.py

from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite:///./test.db"

Base = declarative_base()

class Atleta(Base):
    __tablename__ = 'atletas'
    id = Column(Integer, primary_key=True, index=True)
    nome = Column(String, index=True)
    cpf = Column(String, unique=True, index=True)
    centro_treinamento = Column(String)
    categoria = Column(String)

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base.metadata.create_all(bind=engine)

from pydantic import BaseModel

class AtletaBase(BaseModel):
    nome: str
    centro_treinamento: str
    categoria: str

class AtletaCreate(AtletaBase):
    cpf: str

class Atleta(AtletaBase):
    id: int
    cpf: str

    class Config:
        orm_mode = True

from sqlalchemy.orm import Session
from .models import Atleta

def get_atleta_by_cpf(db: Session, cpf: str):
    return db.query(Atleta).filter(Atleta.cpf == cpf).first()

def get_atletas(db: Session, skip: int = 0, limit: int = 10):
    return db.query(Atleta).offset(skip).limit(limit).all()

def create_atleta(db: Session, atleta: Atleta):
    db.add(atleta)
    db.commit()
    db.refresh(atleta)
    return atleta

from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from .database import SessionLocal, get_atleta_by_cpf, get_atletas, create_atleta
from .models import Atleta
from .schemas import AtletaCreate, Atleta
from fastapi_pagination import Page, add_pagination, paginate

app = FastAPI()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/atletas/", response_model=Page[Atleta])
def read_atletas(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    atletas = get_atletas(db, skip=skip, limit=limit)
    return paginate(atletas)

@app.post("/atletas/", response_model=Atleta)
def create_atleta_endpoint(atleta: AtletaCreate, db: Session = Depends(get_db)):
    db_atleta = get_atleta_by_cpf(db, cpf=atleta.cpf)
    if db_atleta:
        raise HTTPException(status_code=303, detail=f"Já existe um atleta cadastrado com o cpf: {atleta.cpf}")
    try:
        db_atleta = Atleta(nome=atleta.nome, cpf=atleta.cpf, centro_treinamento=atleta.centro_treinamento, categoria=atleta.categoria)
        return create_atleta(db, db_atleta)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=303, detail=f"Já existe um atleta cadastrado com o cpf: {atleta.cpf}")

add_pagination(app)
